// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace followifier {
class Batch;
class BatchDefaultTypeInternal;
extern BatchDefaultTypeInternal _Batch_default_instance_;
class ESP32Message;
class ESP32MessageDefaultTypeInternal;
extern ESP32MessageDefaultTypeInternal _ESP32Message_default_instance_;
}  // namespace followifier
PROTOBUF_NAMESPACE_OPEN
template<> ::followifier::Batch* Arena::CreateMaybeMessage<::followifier::Batch>(Arena*);
template<> ::followifier::ESP32Message* Arena::CreateMaybeMessage<::followifier::ESP32Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace followifier {

// ===================================================================

class ESP32Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:followifier.ESP32Message) */ {
 public:
  ESP32Message();
  virtual ~ESP32Message();

  ESP32Message(const ESP32Message& from);
  ESP32Message(ESP32Message&& from) noexcept
    : ESP32Message() {
    *this = ::std::move(from);
  }

  inline ESP32Message& operator=(const ESP32Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ESP32Message& operator=(ESP32Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ESP32Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ESP32Message* internal_default_instance() {
    return reinterpret_cast<const ESP32Message*>(
               &_ESP32Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ESP32Message& a, ESP32Message& b) {
    a.Swap(&b);
  }
  inline void Swap(ESP32Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ESP32Message* New() const final {
    return CreateMaybeMessage<ESP32Message>(nullptr);
  }

  ESP32Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ESP32Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ESP32Message& from);
  void MergeFrom(const ESP32Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ESP32Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "followifier.ESP32Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacFieldNumber = 1,
    kSsidFieldNumber = 2,
    kFrameHashFieldNumber = 4,
    kTimestampFieldNumber = 3,
    kRsiFieldNumber = 5,
  };
  // required string mac = 1;
  bool has_mac() const;
  void clear_mac();
  const std::string& mac() const;
  void set_mac(const std::string& value);
  void set_mac(std::string&& value);
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  std::string* mutable_mac();
  std::string* release_mac();
  void set_allocated_mac(std::string* mac);

  // required string ssid = 2;
  bool has_ssid() const;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);

  // required string frame_hash = 4;
  bool has_frame_hash() const;
  void clear_frame_hash();
  const std::string& frame_hash() const;
  void set_frame_hash(const std::string& value);
  void set_frame_hash(std::string&& value);
  void set_frame_hash(const char* value);
  void set_frame_hash(const char* value, size_t size);
  std::string* mutable_frame_hash();
  std::string* release_frame_hash();
  void set_allocated_frame_hash(std::string* frame_hash);

  // required int64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 rsi = 5;
  bool has_rsi() const;
  void clear_rsi();
  ::PROTOBUF_NAMESPACE_ID::int32 rsi() const;
  void set_rsi(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:followifier.ESP32Message)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 rsi_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Batch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:followifier.Batch) */ {
 public:
  Batch();
  virtual ~Batch();

  Batch(const Batch& from);
  Batch(Batch&& from) noexcept
    : Batch() {
    *this = ::std::move(from);
  }

  inline Batch& operator=(const Batch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Batch& operator=(Batch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Batch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Batch* internal_default_instance() {
    return reinterpret_cast<const Batch*>(
               &_Batch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Batch& a, Batch& b) {
    a.Swap(&b);
  }
  inline void Swap(Batch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Batch* New() const final {
    return CreateMaybeMessage<Batch>(nullptr);
  }

  Batch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Batch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Batch& from);
  void MergeFrom(const Batch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Batch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "followifier.Batch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .followifier.ESP32Message messages = 1;
  int messages_size() const;
  void clear_messages();
  ::followifier::ESP32Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::followifier::ESP32Message >*
      mutable_messages();
  const ::followifier::ESP32Message& messages(int index) const;
  ::followifier::ESP32Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::followifier::ESP32Message >&
      messages() const;

  // @@protoc_insertion_point(class_scope:followifier.Batch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::followifier::ESP32Message > messages_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ESP32Message

// required string mac = 1;
inline bool ESP32Message::has_mac() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ESP32Message::clear_mac() {
  mac_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ESP32Message::mac() const {
  // @@protoc_insertion_point(field_get:followifier.ESP32Message.mac)
  return mac_.GetNoArena();
}
inline void ESP32Message::set_mac(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:followifier.ESP32Message.mac)
}
inline void ESP32Message::set_mac(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mac_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:followifier.ESP32Message.mac)
}
inline void ESP32Message::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:followifier.ESP32Message.mac)
}
inline void ESP32Message::set_mac(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mac_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:followifier.ESP32Message.mac)
}
inline std::string* ESP32Message::mutable_mac() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:followifier.ESP32Message.mac)
  return mac_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ESP32Message::release_mac() {
  // @@protoc_insertion_point(field_release:followifier.ESP32Message.mac)
  if (!has_mac()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mac_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ESP32Message::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mac_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:followifier.ESP32Message.mac)
}

// required string ssid = 2;
inline bool ESP32Message::has_ssid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ESP32Message::clear_ssid() {
  ssid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ESP32Message::ssid() const {
  // @@protoc_insertion_point(field_get:followifier.ESP32Message.ssid)
  return ssid_.GetNoArena();
}
inline void ESP32Message::set_ssid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:followifier.ESP32Message.ssid)
}
inline void ESP32Message::set_ssid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ssid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:followifier.ESP32Message.ssid)
}
inline void ESP32Message::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:followifier.ESP32Message.ssid)
}
inline void ESP32Message::set_ssid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:followifier.ESP32Message.ssid)
}
inline std::string* ESP32Message::mutable_ssid() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:followifier.ESP32Message.ssid)
  return ssid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ESP32Message::release_ssid() {
  // @@protoc_insertion_point(field_release:followifier.ESP32Message.ssid)
  if (!has_ssid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ssid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ESP32Message::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ssid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid);
  // @@protoc_insertion_point(field_set_allocated:followifier.ESP32Message.ssid)
}

// required int64 timestamp = 3;
inline bool ESP32Message::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ESP32Message::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ESP32Message::timestamp() const {
  // @@protoc_insertion_point(field_get:followifier.ESP32Message.timestamp)
  return timestamp_;
}
inline void ESP32Message::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:followifier.ESP32Message.timestamp)
}

// required string frame_hash = 4;
inline bool ESP32Message::has_frame_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ESP32Message::clear_frame_hash() {
  frame_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ESP32Message::frame_hash() const {
  // @@protoc_insertion_point(field_get:followifier.ESP32Message.frame_hash)
  return frame_hash_.GetNoArena();
}
inline void ESP32Message::set_frame_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  frame_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:followifier.ESP32Message.frame_hash)
}
inline void ESP32Message::set_frame_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  frame_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:followifier.ESP32Message.frame_hash)
}
inline void ESP32Message::set_frame_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  frame_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:followifier.ESP32Message.frame_hash)
}
inline void ESP32Message::set_frame_hash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  frame_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:followifier.ESP32Message.frame_hash)
}
inline std::string* ESP32Message::mutable_frame_hash() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:followifier.ESP32Message.frame_hash)
  return frame_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ESP32Message::release_frame_hash() {
  // @@protoc_insertion_point(field_release:followifier.ESP32Message.frame_hash)
  if (!has_frame_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return frame_hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ESP32Message::set_allocated_frame_hash(std::string* frame_hash) {
  if (frame_hash != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  frame_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_hash);
  // @@protoc_insertion_point(field_set_allocated:followifier.ESP32Message.frame_hash)
}

// required int32 rsi = 5;
inline bool ESP32Message::has_rsi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ESP32Message::clear_rsi() {
  rsi_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ESP32Message::rsi() const {
  // @@protoc_insertion_point(field_get:followifier.ESP32Message.rsi)
  return rsi_;
}
inline void ESP32Message::set_rsi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  rsi_ = value;
  // @@protoc_insertion_point(field_set:followifier.ESP32Message.rsi)
}

// -------------------------------------------------------------------

// Batch

// repeated .followifier.ESP32Message messages = 1;
inline int Batch::messages_size() const {
  return messages_.size();
}
inline void Batch::clear_messages() {
  messages_.Clear();
}
inline ::followifier::ESP32Message* Batch::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:followifier.Batch.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::followifier::ESP32Message >*
Batch::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:followifier.Batch.messages)
  return &messages_;
}
inline const ::followifier::ESP32Message& Batch::messages(int index) const {
  // @@protoc_insertion_point(field_get:followifier.Batch.messages)
  return messages_.Get(index);
}
inline ::followifier::ESP32Message* Batch::add_messages() {
  // @@protoc_insertion_point(field_add:followifier.Batch.messages)
  return messages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::followifier::ESP32Message >&
Batch::messages() const {
  // @@protoc_insertion_point(field_list:followifier.Batch.messages)
  return messages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace followifier

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
